const Discord = require("discord.js")
const db = require('quick.db')
const owner = new db.table("Owner")
const cl = new db.table("Color")
const config = require("../config")

module.exports = {
    name: 'setupserver',
    usage: 'setupserver',
    category: "gestion",
    description: `Permet de configurer automatiquement le serveur avec tous les salons n√©cessaires.`,
    async execute(client, message, args) {

        if (owner.get(`owners.${message.author.id}`) || config.bot.buyer === message.author.id || message.guild.ownerId === message.author.id) {

            let color = cl.fetch(`color_${message.guild.id}`)
            if (color == null) color = config.bot.couleur

            // Cr√©ation des diff√©rentes cat√©gories
            const setupEmbed = new Discord.MessageEmbed()
                .setTitle('üîß Configuration du serveur')
                .setDescription('Quels √©l√©ments souhaitez-vous configurer ?')
                .setColor(color)
                .setFooter({ text: config.bot.footer })

            const row = new Discord.MessageActionRow().addComponents(
                new Discord.MessageSelectMenu()
                    .setCustomId('setup_select')
                    .setPlaceholder('S√©lectionnez les options √† configurer')
                    .setMinValues(1)
                    .setMaxValues(7)
                    .addOptions([
                        {
                            label: 'Tout configurer',
                            description: 'Configure tous les √©l√©ments du serveur',
                            value: 'all',
                            emoji: '‚öôÔ∏è'
                        },
                        {
                            label: 'Salons de logs',
                            description: 'Cr√©e tous les salons de logs n√©cessaires',
                            value: 'logs',
                            emoji: 'üìù'
                        },
                        {
                            label: 'Salons g√©n√©raux',
                            description: 'Cr√©e des salons textuels et vocaux g√©n√©raux',
                            value: 'general',
                            emoji: 'üí¨'
                        },
                        {
                            label: 'Salons mini-jeux',
                            description: 'Cr√©e des salons pour les mini-jeux',
                            value: 'minigames',
                            emoji: 'üéÆ'
                        },
                        {
                            label: 'Salons de support',
                            description: 'Cr√©e des salons pour le syst√®me de tickets et ModMail',
                            value: 'support',
                            emoji: 'üé´'
                        },
                        {
                            label: 'Salons √©conomie',
                            description: 'Cr√©e des salons pour le syst√®me √©conomique',
                            value: 'economy',
                            emoji: 'üí∞'
                        },
                        {
                            label: 'Salons mod√©ration',
                            description: 'Cr√©e des salons pour la mod√©ration',
                            value: 'moderation',
                            emoji: 'üõ°Ô∏è'
                        },
                        {
                            label: 'R√¥les serveur',
                            description: 'Cr√©e tous les r√¥les n√©cessaires pour le serveur',
                            value: 'roles',
                            emoji: 'üëë'
                        }
                    ])
            )

            const setupMessage = await message.channel.send({ embeds: [setupEmbed], components: [row] })

            // Cr√©ation du collecteur pour le menu
            const collector = setupMessage.createMessageComponentCollector({
                componentType: 'SELECT_MENU',
                filter: i => i.user.id === message.author.id,
                time: 120000
            })

            collector.on('collect', async (interaction) => {
                await interaction.deferUpdate()
                const selected = interaction.values

                const loadingEmbed = new Discord.MessageEmbed()
                    .setDescription('‚è≥ Configuration du serveur en cours...')
                    .setColor(color)
                
                await setupMessage.edit({ embeds: [loadingEmbed], components: [] })

                // Cr√©er les cat√©gories, salons et r√¥les
                let createdChannels = []
                let createdRoles = []

                // Fonction pour cr√©er une cat√©gorie s'il n'existe pas d√©j√†
                const createCategory = async (name) => {
                    const existingCategory = message.guild.channels.cache.find(c => c.type === 'GUILD_CATEGORY' && c.name === name)
                    if (existingCategory) return existingCategory
                    
                    const category = await message.guild.channels.create(name, {
                        type: 'GUILD_CATEGORY',
                        permissionOverwrites: [
                            {
                                id: message.guild.id,
                                allow: ['VIEW_CHANNEL']
                            }
                        ]
                    })
                    createdChannels.push(`üìÅ Cat√©gorie: ${category.name}`)
                    return category
                }

                // Fonction pour cr√©er un salon textuel
                const createTextChannel = async (name, category, permissions = null) => {
                    const existingChannel = message.guild.channels.cache.find(c => c.type === 'GUILD_TEXT' && c.name === name && (category ? c.parentId === category.id : true))
                    if (existingChannel) return existingChannel

                    const channelOptions = {
                        type: 'GUILD_TEXT',
                        parent: category
                    }

                    if (permissions) {
                        channelOptions.permissionOverwrites = permissions
                    }
                    
                    const channel = await message.guild.channels.create(name, channelOptions)
                    createdChannels.push(`üí¨ Salon: ${channel.name}`)
                    return channel
                }

                // Fonction pour cr√©er un salon vocal
                const createVoiceChannel = async (name, category, permissions = null) => {
                    const existingChannel = message.guild.channels.cache.find(c => c.type === 'GUILD_VOICE' && c.name === name && (category ? c.parentId === category.id : true))
                    if (existingChannel) return existingChannel

                    const channelOptions = {
                        type: 'GUILD_VOICE',
                        parent: category
                    }

                    if (permissions) {
                        channelOptions.permissionOverwrites = permissions
                    }
                    
                    const channel = await message.guild.channels.create(name, channelOptions)
                    createdChannels.push(`üîä Vocal: ${channel.name}`)
                    return channel
                }

                // Configuration des salons de logs
                if (selected.includes('logs') || selected.includes('all')) {
                    const logsCategory = await createCategory('üìã Logs')
                    
                    // Cr√©ation des salons de logs
                    await createTextChannel('logs-messages', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        },
                        {
                            id: message.guild.roles.cache.find(r => r.name === '@everyone').id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-mod√©ration', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-raid', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-tickets', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-giveaways', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-boosts', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-joinleave', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-roles', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-modmail', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-captcha', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])
                    await createTextChannel('logs-economy', logsCategory, [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ])

                    // Configuration des logs dans la DB
                    const messageLogs = message.guild.channels.cache.find(c => c.name === 'logs-messages')
                    if (messageLogs) db.set(`${message.guild.id}.messagelog`, messageLogs.id)
                    
                    const modLogs = message.guild.channels.cache.find(c => c.name === 'logs-mod√©ration')
                    if (modLogs) db.set(`${message.guild.id}.modlog`, modLogs.id)
                    
                    const raidLogs = message.guild.channels.cache.find(c => c.name === 'logs-raid')
                    if (raidLogs) db.set(`${message.guild.id}.raidlog`, raidLogs.id)
                    
                    const ticketLogs = message.guild.channels.cache.find(c => c.name === 'logs-tickets')
                    if (ticketLogs) db.set(`${message.guild.id}.ticketlog`, ticketLogs.id)
                    
                    const giveawayLogs = message.guild.channels.cache.find(c => c.name === 'logs-giveaways')
                    if (giveawayLogs) db.set(`${message.guild.id}.giveawaylog`, giveawayLogs.id)
                    
                    const boostLogs = message.guild.channels.cache.find(c => c.name === 'logs-boosts')
                    if (boostLogs) db.set(`${message.guild.id}.boostlog`, boostLogs.id)
                    
                    const roleLogs = message.guild.channels.cache.find(c => c.name === 'logs-roles')
                    if (roleLogs) db.set(`${message.guild.id}.rolelog`, roleLogs.id)
                    
                    const modmailLogs = message.guild.channels.cache.find(c => c.name === 'logs-modmail')
                    if (modmailLogs) db.set(`${message.guild.id}.modmaillog`, modmailLogs.id)
                }

                // Configuration des salons g√©n√©raux
                if (selected.includes('general') || selected.includes('all')) {
                    const generalCategory = await createCategory('üí¨ G√©n√©ral')
                    
                    // Cr√©ation des salons textuels g√©n√©raux
                    await createTextChannel('r√®glement', generalCategory)
                    await createTextChannel('annonces', generalCategory)
                    await createTextChannel('g√©n√©ral', generalCategory)
                    await createTextChannel('discussions', generalCategory)
                    await createTextChannel('m√©dias', generalCategory)
                    await createTextChannel('commandes', generalCategory)
                    await createTextChannel('bienvenue', generalCategory)
                    
                    // Cr√©ation des salons vocaux
                    const voiceCategory = await createCategory('üîä Vocal')
                    await createVoiceChannel('G√©n√©ral', voiceCategory)
                    await createVoiceChannel('Jeux', voiceCategory)
                    await createVoiceChannel('AFK', voiceCategory)
                    
                    // Salon de cr√©ation de vocal temporaire
                    await createVoiceChannel('‚ûï Cr√©er un salon', voiceCategory)
                    
                    // Configuration du salon de bienvenue dans la DB
                    const welcomeChannel = message.guild.channels.cache.find(c => c.name === 'bienvenue')
                    if (welcomeChannel) {
                        db.set(`salonbvn_${message.guild.id}`, welcomeChannel.id)
                        db.set(`messagebvn_${message.guild.id}`, '{MemberMention} a rejoint le serveur ! Nous sommes maintenant {MemberCount} membres !')
                        db.set(`joinsettings_${message.guild.id}`, true)
                    }
                }

                // Configuration des salons mini-jeux
                if (selected.includes('minigames') || selected.includes('all')) {
                    const minigamesCategory = await createCategory('üéÆ Mini-jeux')
                    
                    await createTextChannel('coinflip', minigamesCategory)
                    await createTextChannel('dice', minigamesCategory)
                    await createTextChannel('rps', minigamesCategory)
                    await createTextChannel('slots', minigamesCategory)
                    await createTextChannel('8ball', minigamesCategory)
                    await createTextChannel('classements', minigamesCategory)
                }

                // Configuration des salons de support
                if (selected.includes('support') || selected.includes('all')) {
                    const supportCategory = await createCategory('üé´ Support')
                    
                    // Salons pour les tickets
                    await createTextChannel('cr√©er-un-ticket', supportCategory)
                    
                    // Salon pour le captcha
                    await createTextChannel('v√©rification', supportCategory)
                    
                    // Cat√©gorie pour les tickets
                    const ticketCategory = await createCategory('üé´ Tickets')
                    db.set(`${message.guild.id}.categorieticket`, ticketCategory.id)

                    // Cat√©gorie pour les tickets ModMail
                    const modmailCategory = await createCategory('üì® ModMail')
                    
                    // Configuration du ModMail
                    const modmailChannel = message.guild.channels.cache.find(c => c.name === 'logs-modmail')
                    if (modmailChannel) {
                        db.set(`modmail_${message.guild.id}`, {
                            enabled: true,
                            logChannel: modmailChannel.id,
                            category: modmailCategory.id,
                            welcomeMessage: "Bonjour {user}, vous avez ouvert un ticket avec le staff. Veuillez expliquer votre probl√®me et un membre du staff vous r√©pondra d√®s que possible."
                        })
                    }
                }

                // Configuration des salons √©conomie
                if (selected.includes('economy') || selected.includes('all')) {
                    const economyCategory = await createCategory('üí∞ √âconomie')
                    
                    await createTextChannel('boutique', economyCategory)
                    await createTextChannel('travail', economyCategory)
                    await createTextChannel('classement-√©conomie', economyCategory)
                    await createTextChannel('daily', economyCategory)
                    
                    // Configuration des logs d'√©conomie
                    const economyLogs = message.guild.channels.cache.find(c => c.name === 'logs-economy')
                    if (economyLogs) db.set(`${message.guild.id}.economylog`, economyLogs.id)
                }

                // Configuration des salons mod√©ration
                // Fonction pour cr√©er un r√¥le
                const createRole = async (name, color, permissions = null, hoist = false, mentionable = false, position = 0) => {
                    const existingRole = message.guild.roles.cache.find(r => r.name === name)
                    if (existingRole) return existingRole
                    
                    const roleOptions = {
                        name: name,
                        color: color,
                        hoist: hoist,
                        mentionable: mentionable,
                        reason: 'Cr√©ation automatique via setupserver'
                    }
                    
                    if (permissions) {
                        roleOptions.permissions = permissions
                    }
                    
                    const role = await message.guild.roles.create(roleOptions)
                    createdRoles.push(`üëë R√¥le: ${role.name}`)
                    return role
                }

                // Cr√©ation des r√¥les
                if (selected.includes('roles') || selected.includes('all')) {
                    // Cr√©er les r√¥les par ordre d'importance (du plus √©lev√© au plus bas)
                    
                    // R√¥le Fondateur avec permissions administrateur
                    const founderRole = await createRole('üëë Fondateur', '#ff0000', ['ADMINISTRATOR'], true, true)
                    
                    // R√¥le Administrateur avec permissions √©lev√©es
                    const adminPerms = [
                        'ADMINISTRATOR'
                    ]
                    const adminRole = await createRole('üî± Administrateur', '#ff7700', adminPerms, true, true)
                    
                    // R√¥le Responsable
                    const respPerms = [
                        'MANAGE_GUILD', 'MANAGE_ROLES', 'MANAGE_CHANNELS', 'KICK_MEMBERS', 'BAN_MEMBERS',
                        'MANAGE_MESSAGES', 'MUTE_MEMBERS', 'DEAFEN_MEMBERS', 'MOVE_MEMBERS'
                    ]
                    const respRole = await createRole('üî∞ Responsable', '#ffaa00', respPerms, true, true)
                    
                    // R√¥le Mod√©rateur
                    const modPerms = [
                        'MANAGE_MESSAGES', 'KICK_MEMBERS', 'MUTE_MEMBERS', 'MOVE_MEMBERS'
                    ]
                    const modRole = await createRole('üõ°Ô∏è Mod√©rateur', '#00aaff', modPerms, true, true)
                    
                    // R√¥le Support
                    const supportPerms = [
                        'MANAGE_MESSAGES', 'MUTE_MEMBERS'
                    ]
                    const supportRole = await createRole('üîß Support', '#00ffaa', supportPerms, true, true)
                    
                    // R√¥le Partenaire
                    const partnerRole = await createRole('ü§ù Partenaire', '#aa00ff', null, true, true)
                    
                    // R√¥le VIP
                    const vipRole = await createRole('üíé VIP', '#ff00aa', null, true, true)
                    
                    // R√¥le Booster
                    const boosterRole = await createRole('üíñ Booster', '#ff73fa', null, true, true)
                    
                    // R√¥les de niveaux
                    const level100Role = await createRole('üîÜ Niveau 100', '#ffdd00', null, true, false)
                    const level50Role = await createRole('‚≠ê Niveau 50', '#ffee55', null, true, false)
                    const level25Role = await createRole('‚ú® Niveau 25', '#ffff99', null, true, false)
                    
                    // R√¥le Membre v√©rifi√©
                    const verifiedRole = await createRole('‚úÖ Membre v√©rifi√©', '#00cc44', null, true, false)
                    
                    // R√¥le Membre
                    const memberRole = await createRole('üë§ Membre', '#bbbbbb', null, true, false)
                    
                    // R√¥les de couleurs
                    await createRole('üî¥ Rouge', '#ff0000')
                    await createRole('üü† Orange', '#ff7700')
                    await createRole('üü° Jaune', '#ffff00')
                    await createRole('üü¢ Vert', '#00ff00')
                    await createRole('üîµ Bleu', '#0000ff')
                    await createRole('üü£ Violet', '#aa00ff')
                    await createRole('‚ö´ Noir', '#000000')
                    await createRole('‚ö™ Blanc', '#ffffff')
                    
                    // Mettre √† jour les configurations
                    // R√¥le de membre par d√©faut
                    db.set(`joinrole_${message.guild.id}`, memberRole.id)
                    
                    // Configuration du captcha
                    const verificationChannel = message.guild.channels.cache.find(c => c.name === 'v√©rification')
                    if (verificationChannel && verifiedRole) {
                        db.set(`captcha_${message.guild.id}`, {
                            enabled: true,
                            channelId: verificationChannel.id,
                            roleId: verifiedRole.id,
                            difficulty: 'medium',
                            timeout: 120
                        })
                    }
                    
                    // Configuration des permissions pour les r√¥les staff
                    if (adminRole) {
                        db.set(`perm3_${message.guild.id}`, adminRole.id)
                    }
                    if (respRole) {
                        db.set(`perm2_${message.guild.id}`, respRole.id)
                    }
                    if (modRole) {
                        db.set(`perm1_${message.guild.id}`, modRole.id)
                    }
                    
                    // Configuration des permissions de ticket pour le support
                    if (supportRole) {
                        db.set(`ticketrole_${message.guild.id}`, supportRole.id)
                    }
                }

                if (selected.includes('moderation') || selected.includes('all')) {
                    const moderationCategory = await createCategory('üõ°Ô∏è Mod√©ration')
                    
                    // Trouver les r√¥les de staff
                    const staffRoles = message.guild.roles.cache.filter(r => 
                        r.name === 'üî± Administrateur' || 
                        r.name === 'üõ°Ô∏è Mod√©rateur' || 
                        r.name === 'üî∞ Responsable' ||
                        r.name === 'üîß Support'
                    )
                    
                    const staffPerms = [
                        {
                            id: message.guild.id,
                            deny: ['VIEW_CHANNEL']
                        }
                    ]
                    
                    // Ajouter les permissions pour les r√¥les staff
                    staffRoles.forEach(role => {
                        staffPerms.push({
                            id: role.id,
                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY']
                        })
                    })
                    
                    await createTextChannel('logs-automod', moderationCategory, staffPerms)
                    await createTextChannel('commandes-staff', moderationCategory, staffPerms)
                    await createTextChannel('discussions-staff', moderationCategory, staffPerms)
                    
                    await createVoiceChannel('Vocal Staff', moderationCategory, staffPerms)
                }

                // Mise √† jour du syst√®me de logs centralis√©
                if (selected.includes('logs') || selected.includes('all')) {
                    // Configurer le nouveau syst√®me de logs centralis√©
                    const logChannels = {
                        memberLogs: message.guild.channels.cache.find(c => c.name === 'logs-joinleave')?.id,
                        messageLogs: message.guild.channels.cache.find(c => c.name === 'logs-messages')?.id,
                        moderationLogs: message.guild.channels.cache.find(c => c.name === 'logs-mod√©ration')?.id,
                        raidLogs: message.guild.channels.cache.find(c => c.name === 'logs-raid')?.id,
                        ticketLogs: message.guild.channels.cache.find(c => c.name === 'logs-tickets')?.id,
                        giveawayLogs: message.guild.channels.cache.find(c => c.name === 'logs-giveaways')?.id,
                        boostLogs: message.guild.channels.cache.find(c => c.name === 'logs-boosts')?.id,
                        roleLogs: message.guild.channels.cache.find(c => c.name === 'logs-roles')?.id,
                        modmailLogs: message.guild.channels.cache.find(c => c.name === 'logs-modmail')?.id,
                        captchaLogs: message.guild.channels.cache.find(c => c.name === 'logs-captcha')?.id,
                        serverLogs: message.guild.channels.cache.find(c => c.name === 'logs-mod√©ration')?.id
                    }
                    
                    // Stocker la configuration dans la base de donn√©es
                    db.set(`logs_${message.guild.id}`, {
                        enabled: true,
                        channels: logChannels
                    })
                }
                // Message de compl√©tion
                let description = '';
                
                if (createdChannels.length > 0) {
                    description += `**Salons cr√©√©s (${createdChannels.length}):**\n${createdChannels.join('\n')}\n\n`;
                }
                
                if (createdRoles.length > 0) {
                    description += `**R√¥les cr√©√©s (${createdRoles.length}):**\n${createdRoles.join('\n')}`;
                }
                
                const resultEmbed = new Discord.MessageEmbed()
                    .setTitle('‚úÖ Configuration termin√©e')
                    .setDescription(description)
                    .setColor(color)
                    .setFooter({ text: config.bot.footer })

                // Bouton pour supprimer en cas d'erreur
                const resetButton = new Discord.MessageActionRow().addComponents(
                    new Discord.MessageButton()
                        .setCustomId('resetChannels')
                        .setLabel('Annuler les changements')
                        .setStyle('DANGER')
                        .setEmoji('üóëÔ∏è')
                )

                await setupMessage.edit({ embeds: [resultEmbed], components: [resetButton] })

                // Collecteur pour le bouton de r√©initialisation
                const buttonCollector = setupMessage.createMessageComponentCollector({
                    componentType: 'BUTTON',
                    filter: i => i.user.id === message.author.id && i.customId === 'resetChannels',
                    time: 60000
                })

                buttonCollector.on('collect', async (interaction) => {
                    await interaction.deferUpdate()
                    
                    const confirmEmbed = new Discord.MessageEmbed()
                        .setTitle('‚ùì Confirmation')
                        .setDescription('√ätes-vous s√ªr de vouloir supprimer tous les salons cr√©√©s ? Cette action est irr√©versible.')
                        .setColor(color)
                    
                    const confirmRow = new Discord.MessageActionRow().addComponents(
                        new Discord.MessageButton()
                            .setCustomId('confirmReset')
                            .setLabel('Oui, supprimer')
                            .setStyle('DANGER'),
                        new Discord.MessageButton()
                            .setCustomId('cancelReset')
                            .setLabel('Non, annuler')
                            .setStyle('SUCCESS')
                    )
                    
                    await setupMessage.edit({ embeds: [confirmEmbed], components: [confirmRow] })
                    
                    const confirmCollector = setupMessage.createMessageComponentCollector({
                        componentType: 'BUTTON',
                        filter: i => i.user.id === message.author.id && ['confirmReset', 'cancelReset'].includes(i.customId),
                        time: 30000
                    })
                    
                    confirmCollector.on('collect', async (buttonInteraction) => {
                        await buttonInteraction.deferUpdate()
                        
                        if (buttonInteraction.customId === 'confirmReset') {
                            const loadingResetEmbed = new Discord.MessageEmbed()
                                .setDescription('‚è≥ Suppression des salons en cours...')
                                .setColor(color)
                            
                            await setupMessage.edit({ embeds: [loadingResetEmbed], components: [] })
                            
                            // Supprimer les salons cr√©√©s
                            let deletedCount = 0
                            
                            for (const channelName of createdChannels) {
                                const name = channelName.split(': ')[1]
                                const channel = message.guild.channels.cache.find(c => c.name === name)
                                
                                if (channel) {
                                    await channel.delete().catch(() => null)
                                    deletedCount++
                                }
                            }
                            
                            const resetCompleteEmbed = new Discord.MessageEmbed()
                                .setTitle('‚úÖ R√©initialisation termin√©e')
                                .setDescription(`J'ai supprim√© **${deletedCount}** salons et cat√©gories.`)
                                .setColor(color)
                            
                            await setupMessage.edit({ embeds: [resetCompleteEmbed], components: [] })
                        } else {
                            await setupMessage.edit({ embeds: [resultEmbed], components: [] })
                        }
                    })
                })
            })

        } else {
            message.channel.send(`Vous n'avez pas la permission d'utiliser cette commande.`)
        }
    }
}