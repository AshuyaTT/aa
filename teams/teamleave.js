const Discord = require('discord.js');
const db = require('quick.db');
const config = require("../config");
const teams = new db.table("Teams");

module.exports = {
    name: 'teamleave',
    aliases: ['leaveteam'],
    usage: 'teamleave [confirm]',
    category: "teams",
    description: `Permet de quitter votre √©quipe actuelle.`,
    async execute(client, message, args) {
        let color = db.fetch(`color_${message.guild.id}`)
        if (color == null) color = config.bot.couleur;

        // V√©rifier si l'utilisateur est dans une √©quipe
        const userTeam = teams.get(`user_${message.guild.id}_${message.author.id}`);
        if (!userTeam) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Vous n'√™tes pas dans une √©quipe.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // R√©cup√©rer les donn√©es de l'√©quipe
        const teamData = teams.get(`team_${message.guild.id}_${userTeam}`);
        if (!teamData) {
            // Si les donn√©es de l'√©quipe n'existent pas, nettoyer les donn√©es utilisateur
            teams.delete(`user_${message.guild.id}_${message.author.id}`);
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå √âquipe introuvable. Vos donn√©es ont √©t√© nettoy√©es.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // V√©rifier si l'utilisateur est le propri√©taire de l'√©quipe
        if (teamData.owner === message.author.id) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Vous √™tes le propri√©taire de cette √©quipe. Utilisez la commande \`teamdelete\` pour supprimer l'√©quipe ou \`teamtransfer\` pour transf√©rer la propri√©t√© √† un autre membre.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // Demander confirmation si l'argument "confirm" n'est pas fourni
        if (!args[0] || args[0].toLowerCase() !== "confirm") {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setTitle(`‚ö†Ô∏è Confirmation de d√©part`)
                        .setDescription(`√ätes-vous s√ªr de vouloir quitter l'√©quipe **${teamData.name}** ?\n\nPour confirmer, tapez \`${message.content} confirm\``)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // Retirer l'utilisateur de la liste des membres de l'√©quipe
        teamData.members = teamData.members.filter(id => id !== message.author.id);
        teams.set(`team_${message.guild.id}_${userTeam}`, teamData);
        teams.delete(`user_${message.guild.id}_${message.author.id}`);

        // Retirer le r√¥le de l'√©quipe √† l'utilisateur si existant
        const teamRoleId = teams.get(`teamrole_${message.guild.id}_${userTeam}`);
        let roleRemoved = false;

        if (teamRoleId) {
            try {
                const teamRole = await message.guild.roles.fetch(teamRoleId);
                if (teamRole && message.member.roles.cache.has(teamRoleId)) {
                    await message.member.roles.remove(teamRole);
                    roleRemoved = true;
                }
            } catch (error) {
                console.error(`Erreur lors du retrait du r√¥le de l'√©quipe ${teamData.name}:`, error);
            }
        }

        // Notifier le propri√©taire de l'√©quipe
        const owner = await client.users.fetch(teamData.owner).catch(() => null);
        if (owner) {
            try {
                await owner.send({
                    embeds: [
                        new Discord.MessageEmbed()
                            .setColor(color)
                            .setTitle(`üì¢ Membre parti de votre √©quipe`)
                            .setDescription(`**${message.author.tag}** a quitt√© votre √©quipe **${teamData.name}** sur le serveur **${message.guild.name}**.`)
                            .setFooter({ text: config.bot.footer })
                    ]
                });
            } catch (error) {
                // Ignorer les erreurs si le propri√©taire a les DMs ferm√©s
            }
        }

        return message.reply({
            embeds: [
                new Discord.MessageEmbed()
                    .setColor(color)
                    .setTitle(`‚úÖ √âquipe quitt√©e`)
                    .setDescription(`Vous avez quitt√© l'√©quipe **${teamData.name}** avec succ√®s.${roleRemoved ? '\nLe r√¥le de l\'√©quipe vous a √©t√© retir√©.' : ''}`)
                    .setFooter({ text: config.bot.footer })
            ]
        });
    }
};