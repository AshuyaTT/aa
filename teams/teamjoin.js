const Discord = require('discord.js');
const db = require('quick.db');
const config = require("../config");
const teams = new db.table("Teams");

module.exports = {
    name: 'teamjoin',
    aliases: ['jointeam'],
    usage: 'teamjoin <nom>',
    category: "teams",
    description: `Permet de rejoindre une √©quipe.`,
    async execute(client, message, args) {
        let color = db.fetch(`color_${message.guild.id}`)
        if (color == null) color = config.bot.couleur;

        // V√©rifier si l'utilisateur a fourni un nom d'√©quipe
        if (!args[0]) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Veuillez fournir le nom de l'√©quipe que vous souhaitez rejoindre.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        const teamName = args[0].toLowerCase();

        // V√©rifier si l'utilisateur est d√©j√† dans une √©quipe
        const userTeam = teams.get(`user_${message.guild.id}_${message.author.id}`);
        if (userTeam) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Vous √™tes d√©j√† dans une √©quipe. Quittez votre √©quipe actuelle avant d'en rejoindre une nouvelle.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // V√©rifier si l'√©quipe existe
        const teamData = teams.get(`team_${message.guild.id}_${teamName}`);
        if (!teamData) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Aucune √©quipe trouv√©e avec le nom "${args[0]}".`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // V√©rifier si l'utilisateur est d√©j√† dans cette √©quipe
        if (teamData.members.includes(message.author.id)) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Vous √™tes d√©j√† membre de cette √©quipe.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // V√©rifier si l'√©quipe a un syst√®me d'invitation activ√©
        if (teamData.inviteOnly && !teamData.invites?.includes(message.author.id)) {
            return message.reply({
                embeds: [
                    new Discord.MessageEmbed()
                        .setColor(color)
                        .setDescription(`‚ùå Cette √©quipe est sur invitation uniquement. Demandez au propri√©taire de l'√©quipe de vous inviter.`)
                        .setFooter({ text: config.bot.footer })
                ]
            });
        }

        // Ajouter l'utilisateur √† l'√©quipe
        teamData.members.push(message.author.id);
        teams.set(`team_${message.guild.id}_${teamName}`, teamData);
        teams.set(`user_${message.guild.id}_${message.author.id}`, teamName);

        // Si l'utilisateur √©tait dans la liste des invit√©s, le retirer
        if (teamData.invites && teamData.invites.includes(message.author.id)) {
            teamData.invites = teamData.invites.filter(id => id !== message.author.id);
            teams.set(`team_${message.guild.id}_${teamName}`, teamData);
        }

        // Ajouter le r√¥le de l'√©quipe √† l'utilisateur si existant
        const teamRoleId = teams.get(`teamrole_${message.guild.id}_${teamName}`);
        let roleAdded = false;

        if (teamRoleId) {
            try {
                const teamRole = await message.guild.roles.fetch(teamRoleId);
                if (teamRole) {
                    await message.member.roles.add(teamRole);
                    roleAdded = true;
                }
            } catch (error) {
                console.error(`Erreur lors de l'ajout du r√¥le de l'√©quipe ${teamData.name}:`, error);
            }
        }

        // Notifier le propri√©taire de l'√©quipe
        const owner = await client.users.fetch(teamData.owner).catch(() => null);
        if (owner) {
            try {
                await owner.send({
                    embeds: [
                        new Discord.MessageEmbed()
                            .setColor(color)
                            .setTitle(`üì¢ Nouveau membre dans votre √©quipe`)
                            .setDescription(`**${message.author.tag}** a rejoint votre √©quipe **${teamData.name}** sur le serveur **${message.guild.name}**.`)
                            .setFooter({ text: config.bot.footer })
                    ]
                });
            } catch (error) {
                // Ignorer les erreurs si le propri√©taire a les DMs ferm√©s
            }
        }

        return message.reply({
            embeds: [
                new Discord.MessageEmbed()
                    .setColor(color)
                    .setTitle(`‚úÖ √âquipe rejointe`)
                    .setDescription(`Vous avez rejoint l'√©quipe **${teamData.name}** avec succ√®s.${roleAdded ? '\nLe r√¥le de l\'√©quipe vous a √©t√© attribu√©.' : ''}`)
                    .setFooter({ text: config.bot.footer })
            ]
        });
    }
};